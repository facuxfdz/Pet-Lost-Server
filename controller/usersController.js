const filevalidation = require('../service/filevalidation');
const User = require('../models/User.js');
const cloudinary = require('cloudinary');
const fs = require('fs-extra');
const bcryptjs = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');

exports.createUser = async (req, res) => {

	// Checking for errors in check express-validator middleware 
	const errors = validationResult(req);
	if(!errors.isEmpty()){
		return res.status(400).json({errors});
	}

	try {
		
		filevalidation.validateFile(req.file); 
		/* 	
			Multer middleware is launched just when a file is sended to our server, 
			because of this we have to validate here that there are some file uploaded
		*/
		
		const {code, name, password, email, lost_at} = req.body; // Take all the fields from each key value part of req.body
		let newUser = await User.findOne({ email });
		if(newUser) return res.status(400).json({ auth: false, msg: 'Email already exists' }); // Checking if the user is already registered
		
		// Create DB object with the req object data
		newUser = {};
		newUser.code = code;
		newUser.name = name;
		newUser.email = email;
		newUser.lost_at = lost_at;
		
		// Upload photo in our cloud
		const result = await cloudinary.v2.uploader.upload(req.file.path);
		
		// Create DB object with the cloudinary object data
		newUser.photo_url = result.secure_url; // Add photo url after the result JSON object is generated by cloudinary
		newUser.public_id = result.public_id; // Add public id after the result JSON object is generated by cloudinary
		
		// Password hash
		const salt = await bcryptjs.genSalt(10);
		newUser.password = await bcryptjs.hash(password, salt); // Add hashed password to our newUser
		
		// Create DB object with hashed password
		const user = new User(newUser);

		// Save the data into our DB and delete the saved file
		await user.save();
		await fs.unlink(req.file.path); // Delete the file from our server
		
		// Create JWT
		const payload = {
			user: { id: user._id }
		}

		// Sign JWT
		jwt.sign(payload, process.env.SECRET, {
			expiresIn: 86400
		}, (error, token) => {
			if(error){
				throw new Error('sign token error');
			} ;
			
			// Inform successful data saving
			const SUCCESS_COLOR = "\x1b[1;32m%s\x1b[0m";
			console.log(SUCCESS_COLOR, 'Data saved successfully');	
			res.status(200).json({auth: true, token});
		});

	}catch(error){
	/* 
		Error thrown if the file doesn't exist or if something in the database went wrong or if something in the cloud went wrong,
		the data validation and extension validation were made by multer middleware 
	*/
		const ERROR_COLOR = "\x1b[1;31m%s\x1b[0m"; 
		console.log(ERROR_COLOR, "An error has ocurred");
		console.log(ERROR_COLOR, error);
		res.json({auth: false, error});
	}
}
